import '../styles/style.sass'

import type { AppProps } from 'next/app'
import React, { ReactDOM, RefObject, useEffect, useRef, useState } from 'react'

// import LocomotiveScroll from 'locomotive-scroll'
import { LocomotiveScrollProvider as RLSProvider } from 'react-locomotive-scroll'

import Head from 'next/head'
import Header from '../components/Header'
import Footer from '../components/Footer'
import useLocoScroll from '../components/functions/useLocoScroll'
import { BnovoLoadContextProvider } from '../components/bnovo/bnovoContext'

// gsap.registerPlugin(ScrollTrigger)
// gsap.registerPlugin(ScrollSmoother)


export default function App({ Component, pageProps }: AppProps) {
  const [width, setWidth] = useState<Number>(100)
  const [height, setHeight] = useState<Number>(100)

  // useLocoScroll()
  // useEffect(() => {
  //   if (typeof window !== 'undefined') {
  //     const updateDimensions = () => {
  //       setWidth(window.innerWidth)
  //       setHeight(window.innerHeight)
  //     }

  //     window.addEventListener('scroll', updateDimensions)
  //     window.addEventListener('resize', updateDimensions)
  //     return () => {
  //       window.removeEventListener('scroll', updateDimensions)
  //       window.removeEventListener('resize', updateDimensions)
  //     }
  //   }
  // }, [])



  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script src="https://widget.reservationsteps.ru/js/bnovo.js" async></script>

      </Head>

      <div className='wrapper'>
        {/* <RLSProvider
            options={{
              smooth: true,
              multiplier: .6,
              lerp: 0.1
              // ... all available Locomotive Scroll instance options
            }}
            watch={
              [
                //..all the dependencies you want to watch to update the scroll.
                //  Basicaly, you would want to watch page/location changes
                //  For exemple, on Next.js you would want to watch properties like `router.asPath` (you may want to add more criterias if the instance should be update on locations with query parameters)
              ]
            }
            // location={asPath}
            onLocationChange={(scroll: any) => scroll.scrollTo(0, { duration: 0, disableLerp: true })}
            // onUpdate={scroll}
            containerRef={locoScrollRef}
          > */}

        <BnovoLoadContextProvider>
          <Component {...pageProps} />
        </BnovoLoadContextProvider>


        {/* </RLSProvider> */}
        {/* </main> */}
      </div >
    </>
  )
}
